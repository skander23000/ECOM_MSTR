package fr.ecom.mstr.tire.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ItemListLockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemListLockAllPropertiesEquals(ItemListLock expected, ItemListLock actual) {
        assertItemListLockAutoGeneratedPropertiesEquals(expected, actual);
        assertItemListLockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemListLockAllUpdatablePropertiesEquals(ItemListLock expected, ItemListLock actual) {
        assertItemListLockUpdatableFieldsEquals(expected, actual);
        assertItemListLockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemListLockAutoGeneratedPropertiesEquals(ItemListLock expected, ItemListLock actual) {
        assertThat(expected)
            .as("Verify ItemListLock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemListLockUpdatableFieldsEquals(ItemListLock expected, ItemListLock actual) {
        assertThat(expected)
            .as("Verify ItemListLock relevant properties")
            .satisfies(e -> assertThat(e.getUserUuid()).as("check userUuid").isEqualTo(actual.getUserUuid()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getLockTime()).as("check lockTime").isEqualTo(actual.getLockTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItemListLockUpdatableRelationshipsEquals(ItemListLock expected, ItemListLock actual) {
        assertThat(expected)
            .as("Verify ItemListLock relationships")
            .satisfies(e -> assertThat(e.getTire()).as("check tire").isEqualTo(actual.getTire()));
    }
}
