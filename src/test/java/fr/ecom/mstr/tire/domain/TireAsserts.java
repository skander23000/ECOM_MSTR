package fr.ecom.mstr.tire.domain;

import static fr.ecom.mstr.tire.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TireAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTireAllPropertiesEquals(Tire expected, Tire actual) {
        assertTireAutoGeneratedPropertiesEquals(expected, actual);
        assertTireAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTireAllUpdatablePropertiesEquals(Tire expected, Tire actual) {
        assertTireUpdatableFieldsEquals(expected, actual);
        assertTireUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTireAutoGeneratedPropertiesEquals(Tire expected, Tire actual) {
        assertThat(expected)
            .as("Verify Tire auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTireUpdatableFieldsEquals(Tire expected, Tire actual) {
        assertThat(expected)
            .as("Verify Tire relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getTireWidth()).as("check tireWidth").isEqualTo(actual.getTireWidth()))
            .satisfies(e -> assertThat(e.getTireHeight()).as("check tireHeight").isEqualTo(actual.getTireHeight()))
            .satisfies(e -> assertThat(e.getTireDiameter()).as("check tireDiameter").isEqualTo(actual.getTireDiameter()))
            .satisfies(e -> assertThat(e.getTireType()).as("check tireType").isEqualTo(actual.getTireType()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getSpeedIndex()).as("check speedIndex").isEqualTo(actual.getSpeedIndex()))
            .satisfies(e -> assertThat(e.getWeightIndex()).as("check weightIndex").isEqualTo(actual.getWeightIndex()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getDisable()).as("check disable").isEqualTo(actual.getDisable()))
            .satisfies(e -> assertThat(e.getDisableReason()).as("check disableReason").isEqualTo(actual.getDisableReason()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTireUpdatableRelationshipsEquals(Tire expected, Tire actual) {
        assertThat(expected)
            .as("Verify Tire relationships")
            .satisfies(e -> assertThat(e.getTireBrand()).as("check tireBrand").isEqualTo(actual.getTireBrand()));
    }
}
